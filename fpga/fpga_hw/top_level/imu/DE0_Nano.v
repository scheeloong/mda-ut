
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

// Motion in perpendicular plane will cause variations on the specific axis, note that this represent motion AROUND a specific axis
// z-axis = side to side (short)
// y-axis = side to side (long)
// x-axis = vertical

/*

---------------------------------|----------------------------------
---------------------------------|- Y - Axis -----------------------
---------------------------------|----------------------------------
---------------------------------|----------------------------------
---------------------=========================----------------------
---------------------||                     ||----------------------
---------------------||                     ||______________________
---------------------||        DE0-Nano     ||--- X - Axis ---------
---------------------||                     ||----------------------
---------------------||                     ||----------------------
---------------------=========================----------------------
---------------------------------|----------------------------------
---------------------------------|----------------------------------
---------------------------------|----------------------------------
---------------------------------|----------------------------------


*/

module DE0_Nano(

	//////////// CLOCK //////////
	CLOCK_50,

	//////////// LED //////////
	LED,

	//////////// KEY //////////
	KEY,

	//////////// SW //////////
	SW,

	//////////// SDRAM //////////
	DRAM_ADDR,
	DRAM_BA,
	DRAM_CAS_N,
	DRAM_CKE,
	DRAM_CLK,
	DRAM_CS_N,
	DRAM_DQ,
	DRAM_DQM,
	DRAM_RAS_N,
	DRAM_WE_N,

	//////////// EPCS //////////
	EPCS_ASDO,
	EPCS_DATA0,
	EPCS_DCLK,
	EPCS_NCSO,

	//////////// Accelerometer and EEPROM //////////
	G_SENSOR_CS_N,
	G_SENSOR_INT,
	I2C_SCLK,
	I2C_SDAT,

	//////////// ADC //////////
	ADC_CS_N,
	ADC_SADDR,
	ADC_SCLK,
	ADC_SDAT,

	//////////// 2x13 GPIO Header //////////
	GPIO_2,
	GPIO_2_IN,

	//////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
	GPIO_0,
	GPIO_0_IN,

	//////////// GPIO_1, GPIO_1 connect to GPIO Default //////////
	GPIO_1,
	GPIO_1_IN 
);

//=======================================================
//  PARAMETER declarations
//=======================================================


//=======================================================
//  PORT declarations
//=======================================================

//////////// CLOCK //////////
input 		          		CLOCK_50;

//////////// LED //////////
output		     [7:0]		LED;

//////////// KEY //////////
input 		     [1:0]		KEY;

//////////// SW //////////
input 		     [3:0]		SW;

//////////// SDRAM //////////
output		    [12:0]		DRAM_ADDR;
output		     [1:0]		DRAM_BA;
output		          		DRAM_CAS_N;
output		          		DRAM_CKE;
output		          		DRAM_CLK;
output		          		DRAM_CS_N;
inout 		    [15:0]		DRAM_DQ;
output		     [1:0]		DRAM_DQM;
output		          		DRAM_RAS_N;
output		          		DRAM_WE_N;

//////////// EPCS //////////
output		          		EPCS_ASDO;
input 		          		EPCS_DATA0;
output		          		EPCS_DCLK;
output		          		EPCS_NCSO;

//////////// Accelerometer and EEPROM //////////
output		          		G_SENSOR_CS_N;
input 		          		G_SENSOR_INT;
output		          		I2C_SCLK;
inout 		          		I2C_SDAT;

//////////// ADC //////////
output		          		ADC_CS_N;
output		          		ADC_SADDR;
output		          		ADC_SCLK;
input 		          		ADC_SDAT;

//////////// 2x13 GPIO Header //////////
inout 		    [12:0]		GPIO_2;
input 		     [2:0]		GPIO_2_IN;

//////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
inout 		    [33:0]		GPIO_0;
input 		     [1:0]		GPIO_0_IN;

//////////// GPIO_1, GPIO_1 connect to GPIO Default //////////
inout 		    [33:0]		GPIO_1;
input 		     [1:0]		GPIO_1_IN;

///=======================================================
//  REG/WIRE declarations
//=======================================================
wire          reset_n;
wire	        dly_rst;
wire	        spi_clk, spi_clk_out, spi_clk_out2;
wire	[15:0]  data_x;
wire	[9:0]  x_raw;
wire	[9:0]  y_raw;
wire	[9:0]  z_raw;
wire          sys_clk;
wire          no_external_force;
wire  [15:0]  output_x;
wire  [15:0]  output_y;
wire  [15:0]  output_z;
wire  [31:0]  output_x_degree;
wire  [31:0]  output_y_degree;
wire  [31:0]  output_z_degree;
wire  [31:0]  velocity_x_32;
wire  [31:0]  velocity_y_32;
wire  [31:0]  velocity_z_32;
wire  [31:0]  displacement_x_32;
wire  [31:0]  displacement_y_32;
wire  [31:0]  displacement_z_32;
wire  [31:0]  debug_output[31:0];

wire  [31:0]  gyroscope_degree_x;
wire  [31:0]  gyroscope_degree_y;
wire  [31:0]  gyroscope_degree_z;

wire  [11:0]  ADC_12_bit_channel_0;
wire  [11:0]  ADC_12_bit_channel_1;
wire  [11:0]  ADC_12_bit_channel_2;
wire  [11:0]  ADC_12_bit_channel_3;
wire  [11:0]  ADC_12_bit_channel_4;
wire  [11:0]  ADC_12_bit_channel_5;
wire  [11:0]  ADC_12_bit_channel_6;
wire  [11:0]  ADC_12_bit_channel_7;

wire          sda_magnetometer;
wire          scl_magnetometer;
wire  [31:0]  magnetometer_data_x;
wire  [31:0]  magnetometer_data_y;
wire  [31:0]  magnetometer_data_z;

wire          pwm_in_0;
wire          pwm_in_1;
wire          pwm_in_2;
wire          pwm_in_3;
wire          pwm_in_4;
wire          pwm_in_5;
wire          pwm_in_6;
wire          pwm_in_7;

wire  [31:0]  pwm_in_value_out_0;
wire  [31:0]  pwm_in_value_out_1;
wire  [31:0]  pwm_in_value_out_2;
wire  [31:0]  pwm_in_value_out_3;
wire  [31:0]  pwm_in_value_out_4;
wire  [31:0]  pwm_in_value_out_5;
wire  [31:0]  pwm_in_value_out_6;
wire  [31:0]  pwm_in_value_out_7;

wire 	[31:0]  pwm_out_value_0;
wire 	[31:0]  pwm_out_value_1; 
wire 	[31:0]  pwm_out_value_2; 
wire 	[31:0]  pwm_out_value_3; 
wire 	[31:0]  pwm_out_value_4; 
wire 	[31:0]  pwm_out_value_5; 
wire 	[31:0]  pwm_out_value_6; 
wire 	[31:0]  pwm_out_value_7;  

wire          pwm_out_0;
wire          pwm_out_1;
wire          pwm_out_2;
wire          pwm_out_3;
wire          pwm_out_4;
wire          pwm_out_5;
wire          pwm_out_6;
wire          pwm_out_7;

wire [31:0] gps_output_0;
wire [31:0] gps_output_1;
wire [31:0] gps_output_2;
wire [31:0] gps_output_3;
wire [31:0] gps_output_4;
wire [31:0] gps_output_5;
wire [31:0] gps_output_6;
wire [31:0] gps_output_7;

wire [31:0] input_32_x;
wire [31:0] input_32_y;
wire [31:0] input_32_z;
assign input_32_x = { {22{x_raw[9]}},x_raw};
assign input_32_y = { {22{y_raw[9]}},y_raw};
assign input_32_z = { {22{z_raw[9]}},z_raw};

assign pwm_input_0 = GPIO_1[8]; 
assign pwm_input_1 = GPIO_1[10]; 
assign pwm_input_2 = GPIO_1[12]; 
assign pwm_input_3 = GPIO_1[14];

assign pwm_out_0 = GPIO_1[1];
assign pwm_out_1 = GPIO_1[3];
assign pwm_out_2 = GPIO_1[5];
assign pwm_out_3 = GPIO_1[7];
assign pwm_out_4 = GPIO_1[10];
assign pwm_out_5 = GPIO_1[15];
 
assign reset_n = KEY[0];
assign sys_clk = CLOCK_50;

/* The GPIO 2 pin layout

1     0
3     2
5     4
7     6
9     8
11    10     
ADC5  12
ADC7  ADC7
ADC2  ADC3
ADC0  ADC4
GND   ADC1

*/

assign GPIO_2[9] = sda_magnetometer;
assign GPIO_2[11] = scl_magnetometer;

//=======================================================
//  Structural coding
//=======================================================
//	Reset
reset_delay	u_reset_delay	(	
            .iRSTN(reset_n ),
            .iCLK(sys_clk),
            .oRST(dly_rst));

//  PLL            
pll_2mhz pll_2mhz(
            .areset(dly_rst),
            .inclk0(sys_clk),
            .c0(spi_clk),      // 2MHz 200 degree phase shift
            .c1(spi_clk_out)); // 2MHz phase shift 120 degree phase shift

//  Initial Setting and Data Read Back
spi_ee_config u_spi_ee_config (			
						.iRSTN(!dly_rst),															
						.iSPI_CLK(spi_clk),								
						.iSPI_CLK_OUT(spi_clk_out),								
						.iG_INT2(G_SENSOR_INT),            
						.oDATA_L(data_x[7:0]),
						.oDATA_H(data_x[15:8]),
						.SPI_SDIO(I2C_SDAT),
						.oSPI_CSN(G_SENSOR_CS_N),
						.oSPI_CLK(I2C_SCLK),
						.x_raw(x_raw),
						.y_raw(y_raw),
						.z_raw(z_raw));

/*						
raw_data_to_degree raw_data_to_degree(
   .clk(sys_clk),  //meta-stability error?  
	.reset_n(reset_n),
	.tune_offset(1'b0),  
	.update_output(1'b1), 
	.raw_x(x_raw),
	.raw_y(y_raw),
	.raw_z(z_raw),
	// Outputs
	.no_external_force(no_external_force),
	.output_x(output_x),
	.output_y(output_y),
	.output_z(output_z),
   .output_x_degree(output_x_degree),
	.output_y_degree(output_y_degree),
	.output_z_degree(output_z_degree),
	.debug_0(debug_0),
	.debug_1(debug_1),
	.debug_2(debug_2),
	.debug_3(debug_3)
);					

//The integration period is chosen such that the lower 8 bits of the results can be discarded with no major loss of accuracy.
	
integrator_signed_32bits integrator_x_axis_acceleration(
	.clk(sys_clk),
	.reset_n(reset_n),
	.update_period(32'd196078),
	.input_32(input_32_x),
	.output_32(velocity_x_32)
);
integrator_signed_32bits integrator_y_axis_acceleration(
	.clk(sys_clk),
	.reset_n(reset_n),
	.update_period(32'd196078),
	.input_32(input_32_y),
	.output_32(velocity_y_32)
);
integrator_signed_32bits integrator_z_axis_acceleration(
	.clk(sys_clk),
	.reset_n(reset_n),
	.update_period(32'd196078),
	.input_32(input_32_z),
	.output_32(velocity_z_32)
);

integrator_signed_32bits integrator_x_axis_velocity(
	.clk(sys_clk),
	.reset_n(reset_n),
	.update_period(32'd196078),
	.input_32({{8{velocity_x_32[31]}},velocity_x_32[31:8]}+velocity_x_32[31]),
	.output_32(displacement_x_32)
);
integrator_signed_32bits integrator_y_axis_velocity(
	.clk(sys_clk),
	.reset_n(reset_n),
	.update_period(32'd196078),
	.input_32({{8{velocity_y_32[31]}},velocity_y_32[31:8]}+velocity_y_32[31]),
	.output_32(displacement_y_32)
);
integrator_signed_32bits integrator_z_axis_velocity(
	.clk(sys_clk),
	.reset_n(reset_n),
	.update_period(32'd196078),
	.input_32({{8{velocity_z_32[31]}},velocity_z_32[31:8]}+velocity_z_32[31]),
	.output_32(displacement_z_32)
);
*/

gyroscope_data_to_degrees gyroscope_data_to_degrees(
   .clk(sys_clk),
	.reset_n(reset_n),
	.no_external_force(no_external_force),
   .gyroscope_data_x({20'd0,ADC_12_bit_channel_3}),
   .gyroscope_data_y({20'd0,ADC_12_bit_channel_4}),
	.gyroscope_data_z({20'd0,ADC_12_bit_channel_7}),
	.gyroscope_degree_x(gyroscope_degree_x),
   .gyroscope_degree_y(gyroscope_degree_y),
   .gyroscope_degree_z(gyroscope_degree_z)
);

// ADC connections, on chip

ADC_CTRL	adc_controller_8_channels	(
	.iRST(!reset_n),
	.iCLK(spi_clk),
	.iCLK_n(!spi_clk),
	.iGO(1'b1),
						
	.oDIN(ADC_SADDR),
	.oCS_n(ADC_CS_N),
	.oSCLK(ADC_SCLK),
	.iDOUT(ADC_SDAT),
						
	.oADC_12_bit_channel_0(ADC_12_bit_channel_0),
	.oADC_12_bit_channel_1(ADC_12_bit_channel_1),
	.oADC_12_bit_channel_2(ADC_12_bit_channel_2),
	.oADC_12_bit_channel_3(ADC_12_bit_channel_3),
	.oADC_12_bit_channel_4(ADC_12_bit_channel_4),
	.oADC_12_bit_channel_5(ADC_12_bit_channel_5),
	.oADC_12_bit_channel_6(ADC_12_bit_channel_6),
	.oADC_12_bit_channel_7(ADC_12_bit_channel_7)
);

/*
pwm_eight_channel pwm_eight_channel(
   .clk(sys_clk),
	.reset_n(reset_n),
	.pwm_in_0(pwm_in_0),
	.pwm_in_1(pwm_in_1),
	.pwm_in_2(pwm_in_2),
	.pwm_in_3(pwm_in_3),
	.pwm_in_4(pwm_in_4),
	.pwm_in_5(pwm_in_5),
	.pwm_in_6(pwm_in_6),
	.pwm_in_7(pwm_in_7),
   .pwm_in_value_out_0(pwm_in_value_out_0),
	.pwm_in_value_out_1(pwm_in_value_out_1),
	.pwm_in_value_out_2(pwm_in_value_out_2),
	.pwm_in_value_out_3(pwm_in_value_out_3),
	.pwm_in_value_out_4(pwm_in_value_out_4),
	.pwm_in_value_out_5(pwm_in_value_out_5),
	.pwm_in_value_out_6(pwm_in_value_out_6),
	.pwm_in_value_out_7(pwm_in_value_out_7),
	
	.pwm_out_value_0(32'd82500),
	.pwm_out_value_1(32'd82500),
	.pwm_out_value_2(32'd82500),
	.pwm_out_value_3(32'd82500),
	.pwm_out_value_4(32'd82500),
	.pwm_out_value_5(32'd82500),
	.pwm_out_value_6(32'd82500),
	.pwm_out_value_7(32'd82500),
   .pwm_out_0(pwm_out_0),
	.pwm_out_1(pwm_out_1),
	.pwm_out_2(pwm_out_2),
	.pwm_out_3(pwm_out_3),
	.pwm_out_4(pwm_out_4),
	.pwm_out_5(pwm_out_5),
	.pwm_out_6(pwm_out_6),
	.pwm_out_7(pwm_out_7)
);

gps_receiver gps_receiver(
   .clk(sys_clk),
	.reset_n(reset_n),
   .rx_in(pwm_input_0),
	.output_0(gps_output_0),
	.output_1(gps_output_1),
	.output_2(gps_output_2),
	.output_3(gps_output_3),
	.output_4(gps_output_4),
	.output_5(gps_output_5),
	.output_6(gps_output_6),
	.output_7(gps_output_7),
	.debug0(),
	.debug1(),
);
*/

assign sda_magnetometer = 1'bz;
assign scl_magnetometer = 1'bz;

magnetometer_i2c_interface magnetometer_i2c_interface( 
   .reset_n(reset_n),
   .clk(spi_clk),
   //.sda_magnetometer(sda_magnetometer),
   //.scl_magnetometer(scl_magnetometer),
	//.sda_magnetometer(scl_magnetometer),
   //.scl_magnetometer(sda_magnetometer),
   .magnetometer_data_x(magnetometer_data_x),
   .magnetometer_data_y(magnetometer_data_y),
   .magnetometer_data_z(magnetometer_data_z),
	.debug(LED)
);	
	
/*
nios_hello_world nios_hello_world_inst
(
      .ext_clk                     (CLOCK_50),
      .reset_n                     (reset_n),
      .sdram_clk                   (DRAM_CLK),
      .sys_clk                     (sys_clk),
      .zs_addr_from_the_sdram      (DRAM_ADDR),
      .zs_ba_from_the_sdram        (DRAM_BA),
      .zs_cas_n_from_the_sdram     (DRAM_CAS_N),
      .zs_cke_from_the_sdram       (DRAM_CKE),
      .zs_cs_n_from_the_sdram      (DRAM_CS_N),
      .zs_dq_to_and_from_the_sdram (DRAM_DQ),
      .zs_dqm_from_the_sdram       (DRAM_DQM),
      .zs_ras_n_from_the_sdram     (DRAM_RAS_N),
      .zs_we_n_from_the_sdram      (DRAM_WE_N),
		// Output data to processor
		.debug_input0                (gyroscope_degree_x+output_x_degree),
		.debug_input1                (gyroscope_degree_y+output_y_degree),
		.debug_input2                (gyroscope_degree_z),
		.debug_input3                ({{22{x_raw[9]}},x_raw}),
		.debug_input4                ({{22{y_raw[9]}},y_raw}),
		.debug_input5                ({{22{z_raw[9]}},z_raw}),
		.debug_input6                (({{8{velocity_x_32[31]}},velocity_x_32[31:8]}+velocity_x_32[31])),
		.debug_input7                (({{8{velocity_y_32[31]}},velocity_y_32[31:8]}+velocity_y_32[31])),
		.debug_input8                (({{8{velocity_z_32[31]}},velocity_z_32[31:8]}+velocity_z_32[31])),
		.debug_input9                (({{8{displacement_x_32[31]}},displacement_x_32[31:8]}+displacement_x_32[31])),
		.debug_input10               (({{8{displacement_y_32[31]}},displacement_y_32[31:8]}+displacement_y_32[31])),
		.debug_input11               (({{8{displacement_z_32[31]}},displacement_z_32[31:8]}+displacement_z_32[31])),
		.debug_input12               (magnetometer_data_x),
		.debug_input13               (magnetometer_data_y),
		.debug_input14               (magnetometer_data_z),
		.debug_input15               (gyroscope_degree_x+output_x_degree),
		.debug_input16               (gyroscope_degree_y+output_y_degree),
		.debug_input17               (gyroscope_degree_z),
		.debug_input18               (gps_output_0),
		.debug_input19               (gps_output_1),
		.debug_input20               (gps_output_2),
		.debug_input21               (gps_output_3),
		.debug_input22               (gps_output_4),
		.debug_input23               (gps_output_5),
		.debug_input24               (gps_output_6),
		.debug_input25               (gps_output_7),
		.debug_input26               (gyroscope_degree_z),
		.debug_input27               (pwm_value_0),
		.debug_input28               (pwm_value_1),
		.debug_input29               (pwm_value_2),
		.debug_input30               (pwm_value_3),
		.debug_input31               (debug_output[31]),
		
		// Inputs data from processor
		.debug_output0                (debug_output[0]),
		.debug_output1                (debug_output[1]),
		.debug_output2                (debug_output[2]),
		.debug_output3                (debug_output[3]),
		.debug_output4                (debug_output[4]),
		.debug_output5                (debug_output[5]),
		.debug_output6                (debug_output[6]),
		.debug_output7                (debug_output[7]),
		.debug_output8                (debug_output[8]),
		.debug_output9                (debug_output[9]),
		.debug_output10               (debug_output[10]),
		.debug_output11               (debug_output[11]),
		.debug_output12               (debug_output[12]),
		.debug_output13               (debug_output[13]),
		.debug_output14               (debug_output[14]),
		.debug_output15               (debug_output[15]),
		.debug_output16               (debug_output[16]),
		.debug_output17               (debug_output[17]),
		.debug_output18               (debug_output[18]),
		.debug_output19               (debug_output[19]),
		.debug_output20               (debug_output[20]),
		.debug_output21               (debug_output[21]),
		.debug_output22               (debug_output[22]),
		.debug_output23               (debug_output[23]),
		.debug_output24               (debug_output[24]),
		.debug_output25               (debug_output[25]),
		.debug_output26               (debug_output[26]),
		.debug_output27               (debug_output[27]),
		.debug_output28               (debug_output[28]),
		.debug_output29               (debug_output[29]),
		.debug_output30               (debug_output[30]),
		.debug_output31               (debug_output[31]),
);
*/

endmodule
